########################################################################
# JBoss, Home of Professional Open Source
# Copyright 2009, Red Hat Middleware LLC, and individual contributors
# by the @authors tag. See the copyright.txt in the distribution for a
# full listing of individual contributors.
#
# This is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this software; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
#
# @authors Andrew Dinn
#
# SocketMonitor
#
# A byteman script which traces thread creation, start, run and exit
#
# In order for this to run successfully the byteman jar and the byteman
# samples jar need to be added to the bootstrap classpath using the
# boot option to the -javaagent JVM command line argument. The script may
# be loaded either at JVM startup, as shown below, or submitted dynamically
# via the byteman listener (this requires use of the listener:true option)
#
# to use ths script with java program org.my.App execute the following commands
#
#  -- set the directory in which byteman has been installed
#  BYTEMAN_HOME= ...
#
#   -- we need to add byteman jar and samples jar to the boot path
#   BYTEMAN_JAR=${BYTEMAN_HOME}/lib/byteman.jar
#   SAMPLE_JAR=${BYTEMAN_HOME}/sample/lib/byteman-samples.jar
#
#   -- identify this script
#   SCRIPT={BYTEMAN_HOME}/sample/scripts/SocketMonitor.txt
#
#   -- setting this property enables transformation of java.lang classes!
#   ALLOW_JAVA_LANG=-Dorg.jboss.byteman.quodlibet
#
#   -- compose the javaagent options and pass to the java command
#   BYTEMAN_OPTS=-javaagent:${BYTEMAN_JAR}=script:${SCRIPT},boot:${BYTEMAN_JAR},boot:${SAMPLE_JAR}
#   java ${ALLOW_JAVA_LANG} ${BYTEMAN_OPTS} org.my.App
#
#

########################################################################
#
# Rule to trace ServerSocket creation
#

RULE ServerSocket trace create
CLASS java.net.ServerSocket
METHOD <init>(int, int, InetAddress)
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT EXIT
IF TRUE
DO traceStack("*** server create " + $0, 15)
ENDRULE

########################################################################
#
# Rule to trace ServerSocket creation failed with invalid port
#

RULE ServerSocket trace create failed with invalid port
CLASS java.net.ServerSocket
METHOD <init>(int, int, InetAddress)
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT THROW 1
IF TRUE
DO traceStack("*** server create failed with invalid port " + $0, 15)
ENDRULE

########################################################################
#
# Rule to trace ServerSocket creation failed with security exception
#

RULE ServerSocket trace create failed with security exception
CLASS java.net.ServerSocket
METHOD <init>(int, int, InetAddress)
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT THROW 2
IF TRUE
DO traceStack("*** server create failed with security exception " + $0, 15)
ENDRULE

########################################################################
#
# Rule to trace ServerSocket creation failed with IOException
#

RULE ServerSocket trace create failed with IOException
CLASS java.net.ServerSocket
METHOD <init>(int, int, InetAddress)
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT THROW 3
IF TRUE
DO traceStack("*** server create failed with IOException " + $0, 15)
ENDRULE

########################################################################
#
# Rule to trace ServerSocket bind
#

RULE ServerSocket trace bind
CLASS java.net.ServerSocket
METHOD bind(SocketAddress, int)
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT EXIT
IF TRUE
DO traceStack("*** server bind " + $0, 15)
ENDRULE

########################################################################
#
# Rule to trace ServerSocket accept
#

RULE ServerSocket trace accept
CLASS java.net.ServerSocket
METHOD accept()
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT EXIT
IF TRUE
DO traceStack("*** server accept " + $0, 15)
ENDRULE

########################################################################
#
# Rule to trace ServerSocket close
#
# the AT CALL close location means we do not trace calls to already closed sockets
#

RULE ServerSocket trace close
CLASS java.net.ServerSocket
METHOD close
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT CALL close
IF TRUE
DO traceStack("*** server close " + $0, 15)
ENDRULE

########################################################################
#
# Rule to trace socket create
#

RULE Socket trace create
CLASS java.net.Socket
METHOD <init>(SocketAddress, SocketAddress, boolean)
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT EXIT
IF TRUE
DO traceStack("*** create " + $0, 15)
ENDRULE

########################################################################
#
# Rule to trace socket create failed with invalid address
#

RULE Socket trace create failed with invalid address
CLASS java.net.Socket
METHOD <init>(SocketAddress, SocketAddress, boolean)
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT THROW 1
IF TRUE
DO traceStack("*** create failed with invalid address exception " + $0, 15)
ENDRULE

########################################################################
#
# Rule to trace socket create failed with IOException
#

RULE Socket trace create failed with IOException
CLASS java.net.Socket
METHOD <init>(SocketAddress, SocketAddress, boolean)
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT THROW 2
IF TRUE
DO traceStack("*** create failed with IOException " + $0, 15)
ENDRULE

########################################################################
#
# Rule to trace socket bind
#

RULE Socket trace bind
CLASS java.net.Socket
METHOD bind(SocketAddress)
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT EXIT
IF TRUE
DO traceStack("*** bind " + $0, 15)
ENDRULE

########################################################################
#
# Rule to trace socket connect
#

RULE Socket trace connect
CLASS java.net.Socket
METHOD connect(SocketAddress, int)
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT EXIT
IF TRUE
DO traceStack("*** connect " + $0, 15)
ENDRULE

########################################################################
#
# Rule to trace socket close
#
# the AT CALL close location means we do not trace calls to already closed sockets
#

RULE Socket trace close
CLASS java.net.Socket
METHOD close()
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT CALL close
IF TRUE
DO traceStack("*** close " + $0, 15)
ENDRULE

########################################################################
#
# The Sun code overrides the standard socket methdos without calling
# super() so we need to add special case rules for the overriding
# methods.

########################################################################
#
# Rule to trace socket bind for Sun's socket impl
#

RULE Socket trace bind  for Sun's socket impl
CLASS sun.nio.ch.ServerSocketChannelImpl
METHOD bind(SocketAddress)
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT EXIT
IF TRUE
DO traceStack("*** bind for Sun's socket impl " + $0, 15)
ENDRULE

########################################################################
#
# Rule to trace socket connect for Sun's socket impl
#

RULE Socket trace connect for Sun's socket impl
CLASS sun.nio.ch.ServerSocketChannelImpl
METHOD connect(SocketAddress, int)
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT EXIT
IF TRUE
DO traceStack("*** connect for Sun's socket impl " + $0, 15)
ENDRULE

########################################################################
#
# Rule to trace socket close for Sun's socket impl
#
# the AT CALL close location means we do not trace calls to already closed sockets
#

RULE Socket trace close for Sun's socket impl
CLASS sun.nio.ch.ServerSocketChannelImpl
METHOD close()
HELPER org.jboss.byteman.sample.helper.StackTraceHelper
AT CALL close
IF TRUE
DO traceStack("*** close for Sun's socket impl " + $0, 15)
ENDRULE
